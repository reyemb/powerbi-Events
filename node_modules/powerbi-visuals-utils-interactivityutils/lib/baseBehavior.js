import { selectAll } from "d3-selection";
export class BaseBehavior {
    bindClick() {
        const { elementsSelection } = this.options;
        const internalSelection = selectAll(elementsSelection.nodes());
        internalSelection.on("click", (event, datum) => {
            this.selectionHandler.handleSelection(datum, event.ctrlKey);
        });
    }
    bindClearCatcher() {
        const { clearCatcherSelection } = this.options;
        const internalSelection = selectAll(clearCatcherSelection.nodes());
        internalSelection.on("click", (event) => {
            if (event.ctrlKey) {
                return;
            }
            event.preventDefault();
        });
    }
    bindContextMenu() {
        const { elementsSelection } = this.options;
        const internalSelection = selectAll(elementsSelection.nodes());
        internalSelection.on("contextmenu", (event, datum) => {
            this.selectionHandler.handleContextMenu(datum, {
                x: event.clientX,
                y: event.clientY
            });
            event.preventDefault();
            event.stopPropagation();
        });
    }
    bindContextMenuToClearCatcher() {
        const { clearCatcherSelection } = this.options;
        const emptySelection = {
            "measures": [],
            "dataMap": {}
        };
        const internalSelection = selectAll(clearCatcherSelection.nodes());
        internalSelection.on("contextmenu", (event) => {
            this.selectionHandler.handleContextMenu({
                identity: emptySelection,
                selected: false
            }, {
                x: event.clientX,
                y: event.clientY
            });
            event.preventDefault();
            event.stopPropagation();
        });
    }
    bindEvents(options, selectionHandler) {
        this.options = options;
        this.selectionHandler = selectionHandler;
        this.bindClick();
        this.bindClearCatcher();
        this.bindContextMenu();
        this.bindContextMenuToClearCatcher();
    }
    renderSelection(hasSelection) {
        if (hasSelection) {
            this.options.elementsSelection.style("opacity", (category) => {
                if (category.selected) {
                    return 1;
                }
                else {
                    return 0.5;
                }
            });
        }
        else {
            this.options.elementsSelection.style("opacity", 1);
        }
    }
}
//# sourceMappingURL=baseBehavior.js.map