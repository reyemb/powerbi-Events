export interface ClassAndSelector {
    className: string;
    selectorName: string;
}
export declare function createClassAndSelector(className: string): ClassAndSelector;
export declare const styleAttribute = "style";
export declare const pixelUnits = "px";
export declare const heightProperty = "height";
export declare const widthProperty = "width";
export declare const topProperty = "top";
export declare const bottomProperty = "bottom";
export declare const leftProperty = "left";
export declare const rightProperty = "right";
export declare const marginTopProperty = "margin-top";
export declare const marginLeftProperty = "margin-left";
export declare const displayProperty = "display";
export declare const backgroundProperty = "background";
export declare const backgroundColorProperty = "background-color";
export declare const backgroundRepeatProperty = "background-repeat";
export declare const backgroundSizeProperty = "background-size";
export declare const backgroundImageProperty = "background-image";
export declare const textShadowProperty = "text-shadow";
export declare const textAlignProperty = "text-align";
export declare const borderProperty = "border";
export declare const borderTopWidthProperty = "border-top-width";
export declare const borderBottomWidthProperty = "border-bottom-width";
export declare const borderLeftWidthProperty = "border-left-width";
export declare const borderRightWidthProperty = "border-right-width";
export declare const fontSizeProperty = "font-size";
export declare const fontWeightProperty = "font-weight";
export declare const colorProperty = "color";
export declare const opacityProperty = "opacity";
export declare const paddingLeftProperty = "padding-left";
export declare const paddingRightProperty = "padding-right";
export declare const positionProperty = "position";
export declare const maxWidthProperty = "max-width";
export declare const minWidthProperty = "min-width";
export declare const overflowProperty = "overflow";
export declare const overflowXProperty = "overflow-x";
export declare const overflowYProperty = "overflow-y";
export declare const transformProperty = "transform";
export declare const webkitTransformProperty = "-webkit-transform";
export declare const cursorProperty = "cursor";
export declare const visibilityProperty = "visibility";
export declare const absoluteValue = "absolute";
export declare const zeroPixelValue = "0px";
export declare const autoValue = "auto";
export declare const hiddenValue = "hidden";
export declare const noneValue = "none";
export declare const blockValue = "block";
export declare const inlineBlockValue = "inline-block";
export declare const transparentValue = "transparent";
export declare const boldValue = "bold";
export declare const visibleValue = "visible";
export declare const tableRowValue = "table-row";
export declare const coverValue = "cover";
export declare const pointerValue = "pointer";
export declare const scrollValue = "scroll";
export interface ExtendedCSSProperties extends CSSStyleDeclaration {
    scrollbarShadowColor: string;
    scrollbarHighlightColor: string;
    layoutGridChar: string;
    layoutGridType: string;
    textAutospace: string;
    textKashidaSpace: string;
    writingMode: string;
    scrollbarFaceColor: string;
    backgroundPositionY: string;
    lineBreak: string;
    imeMode: string;
    msBlockProgression: string;
    layoutGridLine: string;
    scrollbarBaseColor: string;
    layoutGrid: string;
    layoutFlow: string;
    textKashida: string;
    filter: string;
    zoom: string;
    scrollbarArrowColor: string;
    behavior: string;
    backgroundPositionX: string;
    accelerator: string;
    layoutGridMode: string;
    textJustifyTrim: string;
    scrollbar3dLightColor: string;
    msInterpolationMode: string;
    scrollbarTrackColor: string;
    scrollbarDarkShadowColor: string;
    styleFloat: string;
    getAttribute(attributeName: string, flags?: number): any;
    setAttribute(attributeName: string, AttributeValue: any, flags?: number): void;
    removeAttribute(attributeName: string, flags?: number): boolean;
    pixelWidth: number;
    posHeight: number;
    posLeft: number;
    pixelTop: number;
    pixelBottom: number;
    textDecorationNone: boolean;
    pixelLeft: number;
    posTop: number;
    posBottom: number;
    textDecorationOverline: boolean;
    posWidth: number;
    textDecorationLineThrough: boolean;
    pixelHeight: number;
    textDecorationBlink: boolean;
    posRight: number;
    pixelRight: number;
    textDecorationUnderline: boolean;
    webkitTransform: string;
}
